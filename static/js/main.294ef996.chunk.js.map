{"version":3,"sources":["Snake.js","Food.js","App.js","reportWebVitals.js","index.js"],"names":["props","snakeDots","map","dot","i","style","left","top","className","getRandomCoordinates","Math","floor","random","initialState","food","direction","speed","App","state","onkeydown","e","window","event","keyCode","setState","moveSnake","dots","head","length","push","shift","setInterval","this","document","checkIfoutBorders","checkIfCollapsed","checkIfEat","onGameOver","snake","pop","forEach","enlargeSnake","increaseSpeed","newSnake","unshift","alert","id","Snake","Food","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.294ef996.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default (props) => {\r\n    return (\r\n        <div>\r\n            {props.snakeDots.map((dot ,i) => {\r\n                const style = {\r\n                    left: `${dot[0]}%` , \r\n                    top : `${dot[1]}%`\r\n                }\r\n                return (\r\n                    <div className=\"snake-dot\" key={i} style={style}></div>\r\n                )\r\n            }\r\n            )}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport default (props) => {\r\n\r\n  const style = {\r\n    left: `${props.dot[0]}%`,\r\n    top: `${props.dot[1]}%`\r\n  }\r\n\r\n  return (\r\n    <div className=\"snake-food\" style={style}></div>\r\n  )\r\n}\r\n","\nimport React ,{ Component } from 'react';\nimport Snake from './Snake'\nimport Food from './Food';\n\n\n\nconst getRandomCoordinates = () => {\n  let min = 1;\n  let max = 98 ; \n  let x = Math.floor((Math.random()*(max-min+1)+min)/2)*2;\n  let y = Math.floor((Math.random()*(max-min+1)+min)/2)*2;\n  return[x,y]\n}\n// const canvas = document.querySelector(\".game-area\").innerHTML('GameOver');\n\n\n\nconst initialState = {\n    food : getRandomCoordinates(), \n    direction :'RIGHT',\n    speed : 100 , \n    snakeDots:[\n      [0,0],\n      [2,0]\n    ]\n}\nclass App extends Component {\n  \n  state = initialState\n  componentDidMount(){\n    setInterval (this.moveSnake , this.state.speed)\n    document.onkeydown = this.onkeydown ;\n  }\n\n  componentDidUpdate(){\n  this.checkIfoutBorders();\n  this.checkIfCollapsed();\n  this.checkIfEat ();\n  }\n\n  onkeydown = (e) => {\n    e =e || window.event ; \n    switch (e.keyCode) {\n      case 38  :\n        this.setState ({direction : 'UP'});\n        break ; \n      case 40  :\n        this.setState ({direction : 'DOWN'});\n        break ;  \n      case 37  :\n         this.setState ({direction : 'LEFT'});\n         break ; \n      case 39  :\n         this.setState ({direction : 'RIGHT'});\n         break ; \n    }\n  }\n\n   moveSnake = () => {\n     let dots = [...this.state.snakeDots];\n     let head = dots[dots.length - 1];\n\n     switch (this.state.direction) {\n       case 'RIGHT': \n       head = [head[0] + 2, head [1]];\n       break ; \n\n       case 'LEFT':\n        head = [head[0] - 2, head [1]];\n        break ; \n\n        case 'DOWN':\n        head = [head[0], head [1] + 2];\n        break ; \n\n        case 'UP':\n        head = [head[0], head [1] - 2];\n        break ; \n        \n     }\n     dots.push(head);\n     dots.shift();\n     this.setState({\n       snakeDots:dots\n     })\n\n   }\n   checkIfoutBorders(){\n     let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n     if (head[0] >= 100 || head[1] >= 100 || head[0] < 0  || head[1] < 0){\n       this.onGameOver();\n     }\n   }\n   \n\n   checkIfCollapsed() {\n     let snake = [...this.state.snakeDots];\n     let head = snake[snake.length - 1] ; \n     snake.pop(); \n     snake.forEach(dot => {\n       if (head[0] == dot[0] && head[1] == dot [1]) {\n         this.onGameOver();\n       }\n     })\n   }\n\n   checkIfEat() {\n     let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n     let food = this.state.food;\n     if(head[0] == food[0] && head[1] == food[1]) {\n      this.setState({\n        food: getRandomCoordinates()\n      })\n       this.enlargeSnake();\n       this.increaseSpeed ();\n       \n     }\n   }\n\n   enlargeSnake() {\n     let newSnake = [...this.state.snakeDots] ; \n     newSnake.unshift([])\n     this.setState ({\n       snakeDots : newSnake\n     })\n   }\n\n   \n   increaseSpeed () {\n     if (this.state.speed > 10){\n       this.setState ({\n         speed : this.state.speed - 10\n       })\n     }\n   }\n\n   onGameOver(){\n    // ctx.fillText(\"Game Over!\");\n  \n    alert(`Game Over . Score is ${this.state.snakeDots.length}`);\n    this.setState(initialState)\n  }\n\n//   if (gameOver) {\n//     ctx.fillStyle = \"white\";\n//     ctx.font = \"50px Verdana\";\n\n//     if (gameOver) {\n//       ctx.fillStyle = \"white\";\n//       ctx.font = \"50px Verdana\";\n\n//       var gradient = ctx.createLinearGradient(0, 0, canvas.width, 0);\n//       gradient.addColorStop(\"0\", \" magenta\");\n//       gradient.addColorStop(\"0.5\", \"blue\");\n//       gradient.addColorStop(\"1.0\", \"red\");\n//       // Fill with gradient\n//       ctx.fillStyle = gradient;\n\n//       ctx.fillText(\"Game Over!\", canvas.width / 6.5, canvas.height / 2);\n//     }\n\n//     ctx.fillText(\"Game Over!\", canvas.width / 6.5, canvas.height / 2);\n//   }\n\n//   return gameOver;\n// }\n  render() {\n  return (\n    <div >\n        <h1>Snake Game!</h1>\n        <h5>Score={this.state.snakeDots.length - 2}</h5>\n      {/* <div>\n      \n      </div> */}\n      <div className=\"game-area\" id=\"game\">\n      <Snake snakeDots={this.state.snakeDots} />\n      <Food dot={this.state.food} />\n      </div>\n    </div>\n  );\n  }\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n// import React from 'react';\n// import './App.css';\n\n// export default function App() {\n//   const url = \"https://fontawesome.com/\";\n\n//   const pokemons = [\n//     { id : 1,  class:\" fa fa-ball \"} ,\n//     { id : 8, name : \"wartotle\"} ,\n//     { id : 9, name : \"blastoise\"} ,\n//     { id : 6, name : \"charizard\"} \n\n//   ];\n//   const pairOfPokemons = [...pokemons, ...pokemons];\n\n\n//   let flipCard ; \n//   flipCard = false ;\n//   return (\n//   <div className=\"app\">\n//     <div className=\"cards\">\n//       {pairOfPokemons.map((pokemon,index) => {\n//         return (\n//         <div className={`pokemon-card ${flipCard ? \"flipped\" :\"\"}`} key={index}>\n//           <div className=\"inner\">\n//             <div className=\"front\">\n//                    <img\n//                     src={`${url}/${pokemon.id}.png`}\n//                     alt=\"pokemon-name\"\n//                     width=\"100\"\n//                   />   \n//             </div>\n//             <div className=\"back\"></div>\n\n//           </div>\n\n//         </div>\n//         )\n//       })}\n//     </div>\n//   </div> \n//   )\n// }\n\n\n// const pairOfPokemons = [...pokemons, ...pokemons];\n\n//   function flipCard(index) {\n//     setOpenedCard((opened) => [...opened, index]);\n//   }\n\n//   useEffect(() => {\n//     if (openedCard < 2) return;\n\n//     const firstMatched = pairOfPokemons[openedCard[0]];\n//     const secondMatched = pairOfPokemons[openedCard[1]];\n\n//     if (secondMatched && firstMatched.id === secondMatched.id) {\n//       setMatched([...matched, firstMatched.id]);\n//     }\n\n//     if (openedCard.length === 2) setTimeout(() => setOpenedCard([]), 1000);\n//   }, [openedCard]);\n\n//   return (\n//     <div className=\"App\">\n//       <div className=\"cards\">\n//         {pairOfPokemons.map((pokemon, index) => {\n//           //lets flip the card\n\n//           let isFlipped = false;\n\n//           if (openedCard.includes(index)) isFlipped = true;\n//           if (matched.includes(pokemon.id)) isFlipped = true;\n//           return (\n//             <div\n//               className={`pokemon-card ${isFlipped ? \"flipped\" : \"\"} `}\n//               key={index}\n//               onClick={() => flipCard(index)}\n//             >\n//               <div className=\"inner\">\n//                 <div className=\"front\">\n//                   <img\n//                     src={`${url}/${pokemon.id}.png`}\n//                     alt=\"pokemon-name\"\n//                     width=\"100\"\n//                   />\n//                 </div>\n//                 <div className=\"back\"></div>\n//               </div>\n//             </div>\n//           );\n//         })}\n//       </div>\n//     </div>\n//   );\n// }\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}